// find
$model = $this->get($id);

if ($model === null) {
	return new NotFound(['message' => '{{ class }} not found.']);
}
 
// update
$errors = [];
foreach ($data as $entry) {
	if (!isset($entry['id'])) {
		$errors[] = 'Missing id for {{ foreign_class }}';
	}
	$related = {{ foreign_class }}Query::create()->findOneById($entry['id']);
	$model->add{{ related }}($related);
}

if (count($errors) > 0) {
	return new NotValid(['errors' => $errors]);
}

// save and dispatch events
$event = new {{ class }}Event($model);
$dispatcher = $this->getServiceContainer()->getDispatcher();
$dispatcher->dispatch({{ class }}Event::PRE_{{ const }}_ADD, $event);
$dispatcher->dispatch({{ class }}Event::PRE_SAVE, $event);
$rows = $model->save();
$dispatcher->dispatch({{ class }}Event::POST_{{ const }}_ADD, $event);
$dispatcher->dispatch({{ class }}Event::POST_SAVE, $event);

if ($rows > 0) {
	return Updated(['model' => $model]);
}

return NotUpdated(['model' => $model]);