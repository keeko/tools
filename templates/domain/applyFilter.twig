if (is_array($filter)) {

	// filter by fields
	if (isset($filter['fields'])) {
    	foreach ($filter['fields'] as $column => $value) {
        	$pos = strpos($column, '.');
        	if ($pos !== false) {
        		$rel = NameUtils::toStudlyCase(substr($column, 0, $pos));
        		$col = substr($column, $pos + 1);
        		$method = 'use' . $rel . 'Query';
        		if (method_exists($query, $method)) {
        			$sub = $query->$method();
        			$this->applyFilter($sub, ['fields' => [$col => $value]]);
        			$sub->endUse();
        		}
        	} else {
        		$method = 'filterBy' . NameUtils::toStudlyCase($column);
        		if (method_exists($query, $method)) {
        			$query->$method($value);
        		}
        	}
        }
    }
    
    // filter by features
    if (isset($filter['features'])) {
    	$features = new Text($filter['features']);
    	if ($features->contains('random')) {
    		$query->addAscendingOrderByColumn('RAND()');
    	}
    }
}

if (method_exists($this, 'filter')) {
	$this->filter($query, $filter);
}